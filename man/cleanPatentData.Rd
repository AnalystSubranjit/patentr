% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanPatentData.R
\name{cleanPatentData}
\alias{cleanPatentData}
\title{Generate a clean data set from the imported raw data.}
\usage{
cleanPatentData(patentData = NULL, columnsExpected, cleanNames,
  dateFields = NA, dateOrders, deduplicate = TRUE,
  cakcDict = patentr::cakcDict,
  docLengthTypesDict = patentr::docLengthTypesDict, keepType = "grant",
  firstAssigneeOnly = TRUE, assigneeSep = ";",
  stopWords = patentr::assigneeStopWords)
}
\arguments{
\item{patentData}{The data frame of initial raw patent data.}

\item{columnsExpected}{The expected width of the data frame, numeric.}

\item{cleanNames}{A character vector of length columnsExpected to rename the 
data frame with.}

\item{dateFields}{A character vector of the date column names which will be 
converted to `Date` format.}

\item{dateOrders}{A character string of the format required to convert string 
data into `Date` data. Sumobrain is "ymd" and lens and Google data are "mdy".
Hardcoded values include \code{\link{googleDateOrder}},\code{\link{lensDateOrder}}, 
and \code{\link{sumobrainDateOrder}}.}

\item{deduplicate}{A logical, default set to TRUE, if you want to deduplicated 
any patent documents that have both an app and a grant.}

\item{cakcDict}{A county and kind code dictionary. Default is \code{\link{cakcDict}}.}

\item{docLengthTypesDict}{A document length and type dictionary. Default is \code{\link{docLengthTypesDict}}.}

\item{keepType}{A character variable denoting which document type to keep. Default is "grant". 
If NA, ignore.}

\item{firstAssigneeOnly}{For cleaning names, use the first assignee only, default TRUE.}

\item{assigneeSep}{The separation character if there is more than one assignee. Default 
is ";" semicolon.}

\item{stopWords}{The stopword list to remove from assignee names. Default is 
\code{\link{assigneeStopWords}}.}
}
\value{
A data frame of tidy patent data.
}
\description{
Generate a clean data set from the imported raw data set. The 
data available dictates the number of columns of attributes that can be 
generated.

Sumobrain, Lens.org, and Google Patents have varying levels of data available. 

If you import your own data, be sure to adhere to the template format, or 
read carefully to create your own.
}
\examples{


sumo <- cleanPatentData(patentData = patentr::acars, columnsExpected = sumobrainColumns,
cleanNames = sumobrainNames,
dateFields = sumobrainDateFields,
dateOrders = sumobrainDateOrder,
deduplicate = TRUE,
cakcDict = patentr::cakcDict,
docLengthTypesDict = patentr::docLengthTypesDict,
keepType = "grant",
firstAssigneeOnly = TRUE, 
assigneeSep = ";",
stopWords = patentr::assigneeStopWords)

# use a fresh Google export csv
# in a new csv download, however, it would not be the case


rawGoogleData <- system.file("extdata", "google_autonomous_search.csv", 
package = "patentr")
rawGoogleData <- read.csv(rawGoogleData, 
skip = skipGoogle, stringsAsFactors = FALSE)
rawGoogleData <- data.frame(lapply(rawGoogleData, 
function(x){iconv(x, to = "ASCII")}), stringsAsFactors = FALSE)
google <- cleanPatentData(patentData = rawGoogleData, columnsExpected = googleColumns,
cleanNames = googleNames,
dateFields = googleDateFields,
dateOrders = googleDateOrder,
deduplicate = TRUE,
cakcDict = patentr::cakcDict,
docLengthTypesDict = patentr::docLengthTypesDict,
keepType = "grant",
firstAssigneeOnly = TRUE, 
assigneeSep = ",",
stopWords = patentr::assigneeStopWords)


lensRawData <- system.file("extdata", "lens_autonomous_search.csv", 
package = "patentr")
lensRawData <- read.csv(lensRawData, stringsAsFactors = FALSE, skip = skipLens)
lensRawData <- data.frame(lapply(lensRawData, 
function(x){iconv(x, to = "ASCII")}), stringsAsFactors = FALSE)
lens <- cleanPatentData(patentData = lensRawData, columnsExpected = lensColumns,
cleanNames = lensNames,
dateFields = lensDateFields,
dateOrders = lensDateOrder,
deduplicate = TRUE,
cakcDict = patentr::cakcDict,
docLengthTypesDict = patentr::docLengthTypesDict,
keepType = "grant",
firstAssigneeOnly = TRUE, 
assigneeSep = ";;",
stopWords = patentr::assigneeStopWords)

}
\seealso{
For data formats: \code{\link{acars}} for Sumobrain, 
\code{\link{acarsGoogle}} for Google Patents data, and \code{\link{acarsLens}} 
for Lens.org data.
}
